generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")          // prisma+postgres (Accelerate)
  directUrl = env("DIRECT_POSTGRES_URL")   // standard postgres:// for tools/migrate
}


model Department {
  id    String @id @default(cuid())
  code  Int    @unique
  name  String

  // Explicit relation name to avoid ambiguity
  users User[] @relation("DepartmentUsers")

  @@map("departments")
}

model IncidentType {
  id        String     @id @default(cuid())
  name      String     @unique
  incidents Incident[]

  @@map("incident_types")
}

model User {
  id        String @id @default(cuid())
  role      String
  name      String
  password  String
  ticketNo  String @unique

  // REQUIRED + UNIQUE; weâ€™ll set this = ticketNo in seed
  essUserId String @unique

  
  designation         String  // <-- no ?

  contactNo           String?
  emailId             String?
  emailIdNic          String?
  sailPNo             String? @unique

  // Required but defaults to now
  passwordLastChanged DateTime @default(now())

  // Department relation (explicit name)
  department   Department @relation("DepartmentUsers", fields: [departmentId], references: [id])
  departmentId String
  

  // Back-relation for incidents requested by this user
  incidentsRequested Incident[] @relation("UserRequestor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model AuditEntry {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  author     String
  action     String
  comment    String
  rating     Int?
  isEdited   Boolean  @default(false)
  editedAt   DateTime?

  incident   Incident @relation(fields: [incidentId], references: [id])
  incidentId String

  @@map("audit_entries")
}

model Incident {
  id               String    @id @default(cuid())
  shiftDate        DateTime
  jobTitle         String
  description      String
  priority         String
  status           String
  location         String?
  ipAddress        String?
  jobFrom          String?
  reportedOn       DateTime  @default(now())
  isTypeLocked     Boolean?
  isPriorityLocked Boolean?
  affectedTicketNo String?

  incidentType   IncidentType @relation(fields: [incidentTypeId], references: [id])
  incidentTypeId String

  // Explicit relation name and back-field lives on User.incidentsRequested
  requestor   User   @relation("UserRequestor", fields: [requestorId], references: [id])
  requestorId String

  auditTrail  AuditEntry[]

  @@map("incidents")
}
